/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.visusway.mod.tracetool;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
//
import android.tracetool.SendMode;
import android.tracetool.TTrace;
import android.tracetool.TraceDisplayFlags;
//
import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;


@Kroll.module(name="Tracetool", id="com.visusway.mod.tracetool")
public class TracetoolModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TracetoolModule";
	private static final boolean DBG = TiConfig.LOGD;

	private String m_host ;
	private int m_sendmode;
	private boolean m_ischanged;
	private int m_flags;
	private String[] m_flagtexts;		
	
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public TracetoolModule()
	{
		super();
		m_host = "127.0.0.1";
		m_sendmode = SendMode.Socket;
		m_ischanged = true;
//		m_flags = TraceDisplayFlags.showModifiers + 
//                TraceDisplayFlags.showClassInfo +
//                TraceDisplayFlags.showFields +
//                TraceDisplayFlags.showInheritedMembers +
//                TraceDisplayFlags.showMethods +
//                TraceDisplayFlags.showNonPublic;
		m_flagtexts = new String[]{"showModifiers","showClassInfo","showFields",
				"showInheritedMembers","showMethods","showNonPublic"};
		m_flags = configFlags(m_flagtexts);
		configTracetool();
	}
	
	private int configFlags(String[] flagsArr){
		int flags = 0;
		for(int i = 0; i< flagsArr.length; i++){
			String flagstr = flagsArr[i];
			if (flagstr.equalsIgnoreCase("showModifiers")){
				flags += TraceDisplayFlags.showModifiers;
			}else if (flagstr.equalsIgnoreCase("showClassInfo")){
				flags += TraceDisplayFlags.showClassInfo;
			}else if (flagstr.equalsIgnoreCase("showFields")){
				flags += TraceDisplayFlags.showFields;
			}else if (flagstr.equalsIgnoreCase("showInheritedMembers")){
				flags += TraceDisplayFlags.showInheritedMembers;
			}else if (flagstr.equalsIgnoreCase("showMethods")){
				flags += TraceDisplayFlags.showMethods;
			}else if (flagstr.equalsIgnoreCase("showNonPublic")){
				flags += TraceDisplayFlags.showNonPublic;
			}else if (flagstr.equalsIgnoreCase("ShowCustomAttributes")){
				flags += TraceDisplayFlags.ShowCustomAttributes;
			}else if (flagstr.equalsIgnoreCase("showEvents")){
				flags += TraceDisplayFlags.showEvents;
			}
		}
		return flags;		
	}

	private boolean configTracetool() {
		if (m_ischanged) {
			TTrace.options.socketHost = m_host;
	        TTrace.options.sendMode = m_sendmode;
	        m_ischanged = false;
	        return true;
		}	
		return false;
	}
	
	@Override
	public void onDestroy(Activity activity) {
	    TTrace.closeSocket();
	}

//	@Kroll.onAppCreate
//	public static void onAppCreate(TiApplication app)
//	{
//		Log.d(LCAT, "inside onAppCreate");
//		// put module init code that needs to run when the application is created
//	}

	// Methods
	@Kroll.method
	public boolean option(@SuppressWarnings("rawtypes") HashMap map){
		Log.d(LCAT, "option called");
		KrollDict args = new KrollDict(map);
		
		if (args.containsKeyAndNotNull("host")){
			String host = args.optString("host", "127.0.0.1");
			if (!host.equals(m_host)){
				m_host = host;
				m_ischanged = true;
			}			
		}
		
		if (args.containsKeyAndNotNull("sendmode")){
			String sendmode = args.optString("sendmode", "socket");
			if (!sendmode.equalsIgnoreCase("socket")){
				m_sendmode = SendMode.Socket;
				m_ischanged = true;
			}else{
				if (m_sendmode != SendMode.None){
					m_sendmode = SendMode.None;
					m_ischanged = true;
				}
			}
		}
		
		if (args.containsKeyAndNotNull("flags")){
			String[] flagsArr = args.getStringArray("flags");
			int flags = configFlags(flagsArr);
			if (flags != m_flags){
				m_flags = flags;
				m_flagtexts = null;
				m_flagtexts = flagsArr.clone();
				return true;
			}			
		}
		return configTracetool();
	}
	
	@Kroll.method
	public boolean debug(String leftMsg){
		TTrace.debug().send(leftMsg);
		return true;
	}
	
	@Kroll.method
	public boolean warning(String leftMsg){
		TTrace.warning().send(leftMsg);
		return true;
	}
	
	@Kroll.method
	public boolean error(String leftMsg){
		TTrace.error().send(leftMsg);
		return true;
	}	
	
	// Properties
	@Kroll.getProperty
	public String getHost()
	{
		Log.d(LCAT, "get host property");
		return m_host;
	}	
	
	@Kroll.setProperty
	public void setHost(String value) {
		Log.d(LCAT, "set host property: " + value);
		if (!value.equals(m_host)){ 
			m_host = value;
			m_ischanged = true;			
		}
		configTracetool();
	}

	@Kroll.getProperty
	public String getSendMode()
	{
		Log.d(LCAT, "get sendmode property");
		return (m_sendmode == SendMode.Socket)?"socket":"none";
	}
	
	
	@Kroll.setProperty
	public void setSendMode(String value) {
		Log.d(LCAT, "set sendmode property: " + value);
		if (!value.equalsIgnoreCase("socket")){
			m_sendmode = SendMode.Socket;
			m_ischanged = true;
		}else{
			if (m_sendmode != SendMode.None){
				m_sendmode = SendMode.None;
				m_ischanged = true;
			}
		}
		configTracetool();
	}	
	
	@Kroll.getProperty
	public int getFlags()
	{
		Log.d(LCAT, "get flags property");
		return m_flags;
	}
	
	
	@Kroll.setProperty
	public void setFlags(int value) {
		Log.d(LCAT, "set sendmode property: " + value);
		if (value != m_flags){
			m_flags = value;
		}
	}

//	@Kroll.method
//	public String example1()
//	{
//		Log.d(LCAT, "example1 called");
//		return "hello world1";
//	}
//	
//	// Methods
//	@Kroll.method
//	public String example2()
//	{
//		Log.d(LCAT, "example2 called");
//		return "hello world2";
//	}
	
	
//	// Properties
//	@Kroll.getProperty
//	public String getExample1Prop()
//	{
//		Log.d(LCAT, "get example1 property");
//		return "hello world1";
//	}
//	
//	
//	@Kroll.setProperty
//	public void setExample1Prop(String value) {
//		Log.d(LCAT, "set example1 property: " + value);
//	}
//
//	@Kroll.getProperty
//	public String getExample2Prop()
//	{
//		Log.d(LCAT, "get example2 property");
//		return "hello world2";
//	}
//	
//	
//	@Kroll.setProperty
//	public void setExample2Prop(String value) {
//		Log.d(LCAT, "set example2 property: " + value);
//	}	
	
}

